# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import printing_pb2 as printing__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in printing_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PrintingServiceStub(object):
    """Serviço para o servidor de impressão BURRO (implementado no servidor)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendToPrinter = channel.unary_unary(
                '/distributed_printing.PrintingService/SendToPrinter',
                request_serializer=printing__pb2.PrintRequest.SerializeToString,
                response_deserializer=printing__pb2.PrintResponse.FromString,
                _registered_method=True)


class PrintingServiceServicer(object):
    """Serviço para o servidor de impressão BURRO (implementado no servidor)
    """

    def SendToPrinter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PrintingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendToPrinter': grpc.unary_unary_rpc_method_handler(
                    servicer.SendToPrinter,
                    request_deserializer=printing__pb2.PrintRequest.FromString,
                    response_serializer=printing__pb2.PrintResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'distributed_printing.PrintingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('distributed_printing.PrintingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PrintingService(object):
    """Serviço para o servidor de impressão BURRO (implementado no servidor)
    """

    @staticmethod
    def SendToPrinter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_printing.PrintingService/SendToPrinter',
            printing__pb2.PrintRequest.SerializeToString,
            printing__pb2.PrintResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MutualExclusionServiceStub(object):
    """Serviço para comunicação entre CLIENTES (implementado nos clientes)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestAccess = channel.unary_unary(
                '/distributed_printing.MutualExclusionService/RequestAccess',
                request_serializer=printing__pb2.AccessRequest.SerializeToString,
                response_deserializer=printing__pb2.AccessResponse.FromString,
                _registered_method=True)
        self.ReleaseAccess = channel.unary_unary(
                '/distributed_printing.MutualExclusionService/ReleaseAccess',
                request_serializer=printing__pb2.AccessRelease.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class MutualExclusionServiceServicer(object):
    """Serviço para comunicação entre CLIENTES (implementado nos clientes)
    """

    def RequestAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MutualExclusionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestAccess,
                    request_deserializer=printing__pb2.AccessRequest.FromString,
                    response_serializer=printing__pb2.AccessResponse.SerializeToString,
            ),
            'ReleaseAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseAccess,
                    request_deserializer=printing__pb2.AccessRelease.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'distributed_printing.MutualExclusionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('distributed_printing.MutualExclusionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MutualExclusionService(object):
    """Serviço para comunicação entre CLIENTES (implementado nos clientes)
    """

    @staticmethod
    def RequestAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_printing.MutualExclusionService/RequestAccess',
            printing__pb2.AccessRequest.SerializeToString,
            printing__pb2.AccessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReleaseAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/distributed_printing.MutualExclusionService/ReleaseAccess',
            printing__pb2.AccessRelease.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
